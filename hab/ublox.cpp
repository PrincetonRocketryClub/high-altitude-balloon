#include <stdint.h>
#include <WProgram.h>
#include "ublox.h"

#define GPS_SERIAL Serial4

// GPS Mode 0 (Low altitude, Portable)
byte UBLOX_SET_GPS_MODE_0[] = {
	0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x5C
};
size_t UBLOX_SET_GPS_MODE_0_LEN = sizeof(UBLOX_SET_GPS_MODE_0);

// GPS Mode 6 (Airborne, High Altitude)
byte UBLOX_SET_GPS_MODE_6[] = {
	0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10,
	0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x28
};
size_t UBLOX_SET_GPS_MODE_6_LEN = sizeof(UBLOX_SET_GPS_MODE_6);

// Set main talker ID to GP
byte UBLOX_SET_NMEA_TALKER_GP[] = {
	0xB5, 0x62, 0x06, 0x17, 0x14, 0x00, 0x00, 0x40, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x59
};
size_t UBLOX_SET_NMEA_TALKER_GP_LEN = sizeof(UBLOX_SET_NMEA_TALKER_GP);

// Set PM2 to 1 sec refresh
byte UBLOX_SET_PM2_1SEC[] = {
	0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0xE8,
	0x03, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x86, 0x02, 0x00, 0x00, 0xFE, 0x00, 0x00,
	0x00, 0x64, 0x40, 0x01, 0x00, 0x93, 0x95
};
size_t UBLOX_SET_PM2_1SEC_LEN = sizeof(UBLOX_SET_PM2_1SEC);

// Set PM2 to 2 sec refresh
byte UBLOX_SET_PM2_2SEC[] = {
	0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0xD0,
	0x07, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x86, 0x02, 0x00, 0x00, 0xFE, 0x00, 0x00,
	0x00, 0x64, 0x40, 0x01, 0x00, 0x7F, 0xC1
};
size_t UBLOX_SET_PM2_2SEC_LEN = sizeof(UBLOX_SET_PM2_2SEC);

// Set PM2 to 10 sec refresh
byte UBLOX_SET_PM2_10SEC[] = {
	0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0x10,
	0x27, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x86, 0x02, 0x00, 0x00, 0xFE, 0x00, 0x00,
	0x00, 0x64, 0x40, 0x01, 0x00, 0xDF, 0x21
};
size_t UBLOX_SET_PM2_10SEC_LEN = sizeof(UBLOX_SET_PM2_10SEC);

static void sendUBX(byte *UBXmsg, byte msgLength) {
  for(int i = 0; i < msgLength; i++) {
    GPS_SERIAL.write(UBXmsg[i]);
    Serial.print(UBXmsg[i], HEX);
    GPS_SERIAL.flush();
  }
  GPS_SERIAL.println();
  GPS_SERIAL.flush();
}

// Sends the given config message to the Ublox receiver
int sendConfig(byte* msg, size_t len) {
	// Clean serial stream
	GPS_SERIAL.flush();
	delay(500);
	
	// Write the message
	sendUBX(msg, len);
	
	// Verify ack packet
	unsigned long startTime = millis();
	byte byteCount = 0;
	byte inbyte = 0;
	
	while (millis() - startTime < 3000) {
		while (GPS_SERIAL.available()) {
			// Get next ACK byte
			inbyte = GPS_SERIAL.read();
			// Check if byte is correct
			//Serial.println(inbyte, HEX);
			switch (byteCount) {
			case 0:
				if (inbyte != 0xB5) {
					continue;
				}
				break;
			case 1:
				if (inbyte != 0x62) {
					return -1;
				}
				break;
			case 2:
				if (inbyte != 0x05) {
					return -1;
				}
				break;
			case 3:
				if (inbyte != 0x01) {
					return -1;
				}
				break;
			case 4:
				if (inbyte != 0x02) {
					return -1;
				}
				break;
			case 5:
				if (inbyte != 0x00) {
					return -1;
				}
				break;
			case 6:
				if (inbyte != msg[2]) {
					return -1;
				}
				break;
			case 7:
				if (inbyte != msg[3]) {
					return -1;
				}
				break;
			// Don't worry about checksums
			case 8:
			case 9:
				break;
			default:
				Serial.println("ERROR: Ublox config invalid ACK packet byteCount");
				return -1;
			}
			byteCount++;
			// Entire ACK received
			if (byteCount > 9) {
				Serial.println("Config success!");
				return 0;
			}
		}
	}
	Serial.println("ERROR: Ublox config timeout");
	return -2;
}
